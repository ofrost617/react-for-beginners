Everything in React is called a component.

A component is a reusable piece of a website. React allows you to create your own components/tags

Anywhere that state is changed in a React component, it changes/updates everywhere that data appears on the page.

static/js/bundle.js when server is started and page loads is a link to a react file. Any code written in react.js will be bundled into bundle.js

Every react component needs at least 1 method- the render() method.

When we want our react component to show, we go into out index.html and into the mounting component- here it's the div id-main.
We have to import reactDOM in index.js in order to be able to render our component.

Best practice to put each component in separate files.]

Jsx allows us to write html inside our JS
    return <p>Hello</p>;
// the above line is JSX syntax

We need to give our form (StorePicker.js ln 6) a name, but because the word 'class' is reserved for something else in JS/React, we can't use this to mean
the normal 'class' we'd use in html. Instead it is replaced with 'className'
NB- because we have Emmett enabled, simply typing form.store-selector will autocomplete the form tag with className="store-selector"

With JSX you can only ever return one parent element per component with other elements inside it (or wrapit in a div)

JSX has specific commenting syntax
If you put a JSX comment under return and above your html, it wont work, either put them above or within the element you want to return.

Making the App layout: 
made of header, order, menu etc components. This will initially throw an error when the components are added to App.ja as they haven't been created yet.

step by step of creating a component:
1. Create component.js file
2. import react to that file
3. write component
4. export component at the bottom
5. import component to App.js




Passing props- we want to get data rom one component to another component- this data is supplied using props- like attribtue tags in html.
