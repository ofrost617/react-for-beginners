Everything in React is called a component.

A component is a reusable piece of a website. React allows you to create your own components/tags

Anywhere that state is changed in a React component, it changes/updates everywhere that data appears on the page.

static/js/bundle.js when server is started and page loads is a link to a react file. Any code written in react.js will be bundled into bundle.js

Every react component needs at least 1 method- the render() method.

When we want our react component to show, we go into out index.html and into the mounting component- here it's the div id-main.
We have to import reactDOM in index.js in order to be able to render our component.

Best practice to put each component in separate files.]

Jsx allows us to write html inside our JS
    return <p>Hello</p>;
// the above line is JSX syntax

We need to give our form (StorePicker.js ln 6) a name, but because the word 'class' is reserved for something else in JS/React, we can't use this to mean
the normal 'class' we'd use in html. Instead it is replaced with 'className'
NB- because we have Emmett enabled, simply typing form.store-selector will autocomplete the form tag with className="store-selector"

With JSX you can only ever return one parent element per component with other elements inside it (or wrapit in a div)

JSX has specific commenting syntax
If you put a JSX comment under return and above your html, it wont work, either put them above or within the element you want to return.

Making the App layout: 
made of header, order, menu etc components. This will initially throw an error when the components are added to App.ja as they haven't been created yet.

step by step of creating a component:
1. Create component.js file
2. import react to that file
3. write component
4. export component at the bottom
5. import component to App.js




Passing props- we want to get data rom one component to another component- this data is supplied using props- like attribtue tags in html.

Dynamically changing html:
take a child component (Header.js) and a parent component (App.js)
In the child component, add a tag with a className="x" with content to be changed between the opening and closing tag (eg. {this.props.tagline}
Then in the parent component, add a <Header /> tag but this time add <Header x="y">
{this.props.tagline} will now be replaced with y
In this instance the prop being added to Header.js is x and its value goes from whatever it was previously, to y.
{this.props.whatever} can be used anywhere inside the render method.

typing $r in the console in react mode after selecting a component allows you to access and play with the object in question.

Prop types allow you to verfy that data is passed and that data that is passed is the expected type.

Some components are veyr simple in that they only render out something to the DOM, in this case you just need a stateless functional component- so for 
when you don't need any methods other than render() we can use a stateless funcitonal componnent because it doesn't make sense to use an entire react component.


Routing: changing the URl to /... that changes the page.
React Router is not part of react but is the industry standard for routing in react. Allows you to show and hide components in your app depending on if you're
on the page on which you want to show them or not.
Import BrowserRouter and Route and Switch from react-router-dom and create a Root. Create a BrowserRouter tag wrapped around a Switch tag.
Then within the switch tag use Route tags to create the routes (/...) that they should lead to and render a 
given component using eg. {App}.
Remember to require NotFound from ./components/NotFound.js in order to create a NotFound route.


Events in React
Are the same as events in JS
they are wrapped in SyntheticEvent to make sure they work cross Browser
Events are done in line
First event:
  on click take store name from form
  Then
  add this string to the end of the URl
  
